using System;

namespace InstagramNews.Helpers
{
    internal class Base64
    {
        private static readonly char[] b64e =
        {
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
            'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
            'U', 'V', 'W', 'X', 'Y', 'Z',
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
            'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
            'u', 'v', 'w', 'x', 'y', 'z',
            '+', '_'
        };

        private static readonly int[] b64d =
        {
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 062, 000, 000, 000, 063, 000, 001,
            002, 003, 004, 005, 006, 007, 008, 009, 000, 000,
            000, 000, 000, 000, 000, 010, 011, 012, 013, 014,
            015, 016, 017, 018, 019, 020, 021, 022, 023, 024,
            025, 026, 027, 028, 029, 030, 031, 032, 033, 034,
            035, 000, 000, 000, 000, 000, 000, 036, 037, 038,
            039, 040, 041, 042, 043, 044, 045, 046, 047, 048,
            049, 050, 051, 052, 053, 054, 055, 056, 057, 058,
            059, 060, 061, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
            000, 000, 000, 000, 000, 000
        };

        public static string b64ConvertInt(long value, int length)
        {
            if(length == 10)
            {
                var c = new char[10];
                c[0] = b64e[(value & 1134907106097364992) >> 54];
                c[1] = b64e[(value & 17732923532771328) >> 48];
                c[2] = b64e[(value & 277076930199552) >> 42];
                c[3] = b64e[(value & 4329327034368) >> 36];
                c[4] = b64e[(value & 67645734912) >> 30];
                c[5] = b64e[(value & 1056964608) >> 24];
                c[6] = b64e[(value & 16515072) >> 18];
                c[7] = b64e[(value & 258048) >> 12];
                c[8] = b64e[(value & 4032) >> 06];
                c[9] = b64e[(value & 63)];
                return new string(c);
            }
            if(length == 9)
            {
                var c = new char[9];
                c[0] = b64e[(value & 17732923532771328) >> 48];
                c[1] = b64e[(value & 277076930199552) >> 42];
                c[2] = b64e[(value & 4329327034368) >> 36];
                c[3] = b64e[(value & 67645734912) >> 30];
                c[4] = b64e[(value & 1056964608) >> 24];
                c[5] = b64e[(value & 16515072) >> 18];
                c[6] = b64e[(value & 258048) >> 12];
                c[7] = b64e[(value & 4032) >> 06];
                c[8] = b64e[(value & 63)];
                return new string(c);
            }
            if(length == 8)
            {
                var c = new char[8];
                c[0] = b64e[(value & 277076930199552) >> 42];
                c[1] = b64e[(value & 4329327034368) >> 36];
                c[2] = b64e[(value & 67645734912) >> 30];
                c[3] = b64e[(value & 1056964608) >> 24];
                c[4] = b64e[(value & 16515072) >> 18];
                c[5] = b64e[(value & 258048) >> 12];
                c[6] = b64e[(value & 4032) >> 06];
                c[7] = b64e[(value & 63)];
                return new string(c);
            }
            if(length == 7)
            {
                var c = new char[7];
                c[0] = b64e[(value & 4329327034368) >> 36];
                c[1] = b64e[(value & 67645734912) >> 30];
                c[2] = b64e[(value & 1056964608) >> 24];
                c[3] = b64e[(value & 16515072) >> 18];
                c[4] = b64e[(value & 258048) >> 12];
                c[5] = b64e[(value & 4032) >> 06];
                c[6] = b64e[(value & 63)];
                return new string(c);
            }
            if(length == 6)
            {
                var c = new char[6];
                c[0] = b64e[(value & 67645734912) >> 30];
                c[1] = b64e[(value & 1056964608) >> 24];
                c[2] = b64e[(value & 16515072) >> 18];
                c[3] = b64e[(value & 258048) >> 12];
                c[4] = b64e[(value & 4032) >> 06];
                c[5] = b64e[(value & 63)];
                return new string(c);
            }
            if(length == 5)
            {
                var c = new char[5];
                c [0] = b64e [(value & 1056964608) >> 24];
                c [1] = b64e [(value & 16515072) >> 18];
                c [2] = b64e [(value & 258048) >> 12];
                c [3] = b64e [(value & 4032) >> 06];
                c [4] = b64e [(value & 63)];
                return new string(c);
            }
            if(length == 4)
            {
                var c = new char[4];
                c [0] = b64e [(value & 16515072) >> 18];
                c [1] = b64e [(value & 258048) >> 12];
                c [2] = b64e [(value & 4032) >> 06];
                c [3] = b64e [(value & 63)];
                return new string(c);
            }
            if(length == 3)
            {
                var c = new char[3];
                c [0] = b64e [(value & 258048) >> 12];
                c [1] = b64e [(value & 4032) >> 06];
                c [2] = b64e [(value & 63)];
                return new string(c);
            }
            if(length == 2)
            {
                var c = new char[2];
                c [0] = b64e [(value & 4032) >> 06];
                c [1] = b64e [(value & 63)];
                return new string(c);
            }
            return Convert.ToString(b64e [(value & 63)]);
        }

        public static long b64ConvertString(string s)
        {
            int n = s.Length;
            char[] c = s.ToCharArray();
            if(n == 10)
            {
                return (b64d [c [0]] << 54) + (b64d [c [1]] << 48) + (b64d [c [2]] << 42) + 
                       (b64d [c [3]] << 36) + (b64d [c [4]] << 30) + 
                       (b64d [c [5]] << 24) + (b64d [c [6]] << 18) +
                       (b64d [c [7]] << 12) + (b64d [c [8]] << 6) + b64d [c [9]];
            }
            if(n == 9)
            {
                return (b64d [c [0]] << 48) + (b64d [c [1]] << 42) + 
                       (b64d [c [2]] << 36) + (b64d [c [3]] << 30) + 
                       (b64d [c [4]] << 24) + (b64d [c [5]] << 18) +
                       (b64d [c [6]] << 12) + (b64d [c [7]] << 6) + b64d [c [8]];
            }
            if(n == 8)
            {
                return (b64d [c [0]] << 42) + (b64d [c [1]] << 36) + (b64d [c [2]] << 30) + 
                       (b64d [c [3]] << 24) + (b64d [c [4]] << 18) +
                       (b64d [c [5]] << 12) + (b64d [c [6]] << 6) + b64d [c [7]];
            }
            if(n == 7)
            {
                return (b64d [c [0]] << 36) + (b64d [c [1]] << 30) + 
                       (b64d [c [2]] << 24) + (b64d [c [3]] << 18) +
                       (b64d [c [4]] << 12) + (b64d [c [5]] << 6) + b64d [c [6]];
            }
            if(n == 6)
            {
                return (b64d [c [0]] << 30) + (b64d [c [1]] << 24) + (b64d [c [2]] << 18) +
                       (b64d [c [3]] << 12) + (b64d [c [4]] << 6) + b64d [c [5]];
            }
            if(n == 5)
            {
                return (b64d [c [0]] << 24) + (b64d [c [1]] << 18) +
                       (b64d [c [2]] << 12) + (b64d [c [3]] << 6) + b64d [c [4]];
            }
            if(n == 4)
            {
                return (b64d [c [0]] << 18) + (b64d [c [1]] << 12) +
                       (b64d [c [2]] << 6) + b64d [c [3]];
            }
            if(n == 3)
            {
                return (b64d [c [0]] << 12) + (b64d [c [1]] << 6) + b64d [c [2]];
            }
            if(n == 2)
            {
                return (b64d [c [0]] << 6) + b64d [c [1]];
            }
            if(n == 1)
            {
                return b64d [c [0]];
            }

            return 0;
        }
    }
}